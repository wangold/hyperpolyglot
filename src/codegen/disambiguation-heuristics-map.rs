static DISAMBIGUATIONS: phf::Map<&'static str, &'static [Rule]> =
::phf::Map {
    key: 10121458955350035957,
    disps: &[
        (0, 1),
        (11, 69),
        (0, 1),
        (0, 20),
        (0, 25),
        (0, 25),
        (4, 0),
        (0, 18),
        (2, 39),
        (5, 3),
        (1, 19),
        (17, 3),
        (11, 52),
        (0, 31),
        (0, 36),
        (0, 5),
        (4, 10),
        (0, 74),
    ],
    entries: &[
        (".5", &[Rule { languages: &["Roff Manpage"], pattern: Some(Pattern::And(&[Pattern::Positive("^[.'][ \\t]*Dd +(?:[^\"\\s]+|\"[^\"]+\")"),Pattern::Positive("^[.'][ \\t]*Dt +(?:[^\"\\s]+|\"[^\"]+\") +\"?(?:[1-9]|@[^\\s@]+@)"),Pattern::Positive("^[.'][ \\t]*Sh +(?:[^\"\\s]|\"[^\"]+\")"),]))},Rule { languages: &["Roff Manpage"], pattern: Some(Pattern::And(&[Pattern::Positive("^[.'][ \\t]*TH +(?:[^\"\\s]+|\"[^\"]+\") +\"?(?:[1-9]|@[^\\s@]+@)"),Pattern::Positive("^[.'][ \\t]*SH +(?:[^\"\\s]+|\"[^\"\\s]+)"),]))},Rule { languages: &["Roff"], pattern: None},]),
        (".rpy", &[Rule { languages: &["Python"], pattern: Some(Pattern::Positive("(?m:^(import|from|class|def)\\s)"))},Rule { languages: &["Ren'Py"], pattern: None},]),
        (".properties", &[Rule { languages: &["INI"], pattern: Some(Pattern::And(&[Pattern::Positive("^[^#!;][^=]*="),Pattern::Positive("^[;\\[]"),]))},Rule { languages: &["Java Properties"], pattern: Some(Pattern::And(&[Pattern::Positive("^[^#!;][^=]*="),Pattern::Positive("^[#!]"),]))},Rule { languages: &["INI"], pattern: Some(Pattern::Positive("^[^#!;][^=]*="))},Rule { languages: &["Java properties"], pattern: Some(Pattern::Positive("^[^#!][^:]*:"))},]),
        (".pp", &[Rule { languages: &["Pascal"], pattern: Some(Pattern::Positive("^\\s*end[.;]"))},Rule { languages: &["Puppet"], pattern: Some(Pattern::Positive("^\\s+\\w+\\s+=>\\s"))},]),
        (".nl", &[Rule { languages: &["NL"], pattern: Some(Pattern::Positive("^(b|g)[0-9]+ "))},Rule { languages: &["NewLisp"], pattern: None},]),
        (".rno", &[Rule { languages: &["RUNOFF"], pattern: Some(Pattern::Positive("(?i:^\\.!|^\\f|\\f$|^\\.end lit(?:eral)?\\b|^\\.[a-zA-Z].*?;\\.[a-zA-Z](?:[; \\t])|\\^\\*[^\\s*][^*]*\\\\\\*)"))},Rule { languages: &["Roff"], pattern: Some(Pattern::Positive("^\\.\\\\\" "))},]),
        (".as", &[Rule { languages: &["ActionScript"], pattern: Some(Pattern::Positive("^\\s*(package\\s+[a-z0-9_\\.]+|import\\s+[a-zA-Z0-9_\\.]+;|class\\s+[A-Za-z0-9_]+\\s+extends\\s+[A-Za-z0-9_]+)"))},Rule { languages: &["AngelScript"], pattern: None},]),
        (".cs", &[Rule { languages: &["Smalltalk"], pattern: Some(Pattern::Positive("![\\w\\s]+methodsFor: "))},Rule { languages: &["C#"], pattern: Some(Pattern::Positive("^(\\s*namespace\\s*[\\w\\.]+\\s*\\{|\\s*//)"))},]),
        (".lsp", &[Rule { languages: &["Common Lisp"], pattern: Some(Pattern::Positive("^\\s*\\((?i:defun|in-package|defpackage) "))},Rule { languages: &["NewLisp"], pattern: Some(Pattern::Positive("^\\s*\\(define "))},]),
        (".w", &[Rule { languages: &["OpenEdge ABL"], pattern: Some(Pattern::Positive("&ANALYZE-SUSPEND _UIB-CODE-BLOCK _CUSTOM _DEFINITIONS"))},Rule { languages: &["CWeb"], pattern: Some(Pattern::Positive("^@(<|\\w+\\.)"))},]),
        (".9", &[Rule { languages: &["Roff Manpage"], pattern: Some(Pattern::And(&[Pattern::Positive("^[.'][ \\t]*Dd +(?:[^\"\\s]+|\"[^\"]+\")"),Pattern::Positive("^[.'][ \\t]*Dt +(?:[^\"\\s]+|\"[^\"]+\") +\"?(?:[1-9]|@[^\\s@]+@)"),Pattern::Positive("^[.'][ \\t]*Sh +(?:[^\"\\s]|\"[^\"]+\")"),]))},Rule { languages: &["Roff Manpage"], pattern: Some(Pattern::And(&[Pattern::Positive("^[.'][ \\t]*TH +(?:[^\"\\s]+|\"[^\"]+\") +\"?(?:[1-9]|@[^\\s@]+@)"),Pattern::Positive("^[.'][ \\t]*SH +(?:[^\"\\s]+|\"[^\"\\s]+)"),]))},Rule { languages: &["Roff"], pattern: None},]),
        (".r", &[Rule { languages: &["Rebol"], pattern: Some(Pattern::Positive("(?i:\\bRebol\\b)"))},Rule { languages: &["R"], pattern: Some(Pattern::Positive("<-|^\\s*#"))},]),
        (".3", &[Rule { languages: &["Roff Manpage"], pattern: Some(Pattern::And(&[Pattern::Positive("^[.'][ \\t]*Dd +(?:[^\"\\s]+|\"[^\"]+\")"),Pattern::Positive("^[.'][ \\t]*Dt +(?:[^\"\\s]+|\"[^\"]+\") +\"?(?:[1-9]|@[^\\s@]+@)"),Pattern::Positive("^[.'][ \\t]*Sh +(?:[^\"\\s]|\"[^\"]+\")"),]))},Rule { languages: &["Roff Manpage"], pattern: Some(Pattern::And(&[Pattern::Positive("^[.'][ \\t]*TH +(?:[^\"\\s]+|\"[^\"]+\") +\"?(?:[1-9]|@[^\\s@]+@)"),Pattern::Positive("^[.'][ \\t]*SH +(?:[^\"\\s]+|\"[^\"\\s]+)"),]))},Rule { languages: &["Roff"], pattern: None},]),
        (".bb", &[Rule { languages: &["BlitzBasic"], pattern: Some(Pattern::Positive("(<^\\s*; |End Function)"))},Rule { languages: &["BitBake"], pattern: Some(Pattern::Positive("^\\s*(# |include|require)\\b"))},]),
        (".t", &[Rule { languages: &["Perl"], pattern: Some(Pattern::Positive("\\buse\\s+(?:strict\\b|v?5\\.)"))},Rule { languages: &["Raku"], pattern: Some(Pattern::Positive("^\\s*(?:use\\s+v6\\b|\\bmodule\\b|\\b(?:my\\s+)?class\\b)"))},Rule { languages: &["Turing"], pattern: Some(Pattern::Positive("^\\s*%[ \\t]+|^\\s*var\\s+\\w+(\\s*:\\s*\\w+)?\\s*:=\\s*\\w+"))},]),
        (".pm", &[Rule { languages: &["Perl"], pattern: Some(Pattern::Positive("\\buse\\s+(?:strict\\b|v?5\\.)"))},Rule { languages: &["Raku"], pattern: Some(Pattern::Positive("^\\s*(?:use\\s+v6\\b|\\bmodule\\b|\\b(?:my\\s+)?class\\b)"))},Rule { languages: &["X PixMap"], pattern: Some(Pattern::Positive("^\\s*/\\* XPM \\*/"))},]),
        (".srt", &[Rule { languages: &["SubRip Text"], pattern: Some(Pattern::Positive("^(\\d{2}:\\d{2}:\\d{2},\\d{3})\\s*(-->)\\s*(\\d{2}:\\d{2}:\\d{2},\\d{3})$"))},]),
        (".n", &[Rule { languages: &["Roff"], pattern: Some(Pattern::Positive("^[.']"))},Rule { languages: &["Nemerle"], pattern: Some(Pattern::Positive("^(module|namespace|using)\\s"))},]),
        (".7", &[Rule { languages: &["Roff Manpage"], pattern: Some(Pattern::And(&[Pattern::Positive("^[.'][ \\t]*Dd +(?:[^\"\\s]+|\"[^\"]+\")"),Pattern::Positive("^[.'][ \\t]*Dt +(?:[^\"\\s]+|\"[^\"]+\") +\"?(?:[1-9]|@[^\\s@]+@)"),Pattern::Positive("^[.'][ \\t]*Sh +(?:[^\"\\s]|\"[^\"]+\")"),]))},Rule { languages: &["Roff Manpage"], pattern: Some(Pattern::And(&[Pattern::Positive("^[.'][ \\t]*TH +(?:[^\"\\s]+|\"[^\"]+\") +\"?(?:[1-9]|@[^\\s@]+@)"),Pattern::Positive("^[.'][ \\t]*SH +(?:[^\"\\s]+|\"[^\"\\s]+)"),]))},Rule { languages: &["Roff"], pattern: None},]),
        (".md", &[Rule { languages: &["Markdown"], pattern: Some(Pattern::Or(&[Pattern::Positive("(^[-A-Za-z0-9=#!\\*\\[|>])|</"),Pattern::Positive("\\A\\z"),]))},Rule { languages: &["GCC Machine Description"], pattern: Some(Pattern::Positive("^(;;|\\(define_)"))},Rule { languages: &["Markdown"], pattern: None},]),
        (".h", &[Rule { languages: &["Objective-C"], pattern: Some(Pattern::Positive("^\\s*(@(interface|class|protocol|property|end|synchronised|selector|implementation)\\b|#import\\s+.+\\.h[\">])"))},Rule { languages: &["C++"], pattern: Some(Pattern::Or(&[Pattern::Positive("^\\s*#\\s*include <(cstdint|string|vector|map|list|array|bitset|queue|stack|forward_list|unordered_map|unordered_set|(i|o|io)stream)>"),Pattern::Positive("^\\s*template\\s*<"),Pattern::Positive("^[ \\t]*(try|constexpr)"),Pattern::Positive("^[ \\t]*catch\\s*\\("),Pattern::Positive("^[ \\t]*(class|(using[ \\t]+)?namespace)\\s+\\w+"),Pattern::Positive("^[ \\t]*(private|public|protected):$"),Pattern::Positive("std::\\w+"),]))},Rule { languages: &["C"], pattern: None},]),
        (".ml", &[Rule { languages: &["OCaml"], pattern: Some(Pattern::Positive("(^\\s*module)|let rec |match\\s+(\\S+\\s)+with"))},Rule { languages: &["Standard ML"], pattern: Some(Pattern::Positive("=> |case\\s+(\\S+\\s)+of"))},]),
        (".d", &[Rule { languages: &["D"], pattern: Some(Pattern::Positive("^module\\s+[\\w.]*\\s*;|import\\s+[\\w\\s,.:]*;|\\w+\\s+\\w+\\s*\\(.*\\)(?:\\(.*\\))?\\s*\\{[^}]*\\}|unittest\\s*(?:\\(.*\\))?\\s*\\{[^}]*\\}"))},Rule { languages: &["DTrace"], pattern: Some(Pattern::Positive("^(\\w+:\\w*:\\w*:\\w*|BEGIN|END|provider\\s+|(tick|profile)-\\w+\\s+\\{[^}]*\\}|#pragma\\s+D\\s+(option|attributes|depends_on)\\s|#pragma\\s+ident\\s)"))},Rule { languages: &["Makefile"], pattern: Some(Pattern::Positive("([/\\\\].*:\\s+.*\\s\\\\$|: \\\\$|^[ %]:|^[\\w\\s/\\\\.]+\\w+\\.\\w+\\s*:\\s+[\\w\\s/\\\\.]+\\w+\\.\\w+)"))},]),
        (".ice", &[Rule { languages: &["JSON"], pattern: Some(Pattern::Positive("\\A\\s*[{\\[]"))},Rule { languages: &["Slice"], pattern: None},]),
        (".mdoc", &[Rule { languages: &["Roff Manpage"], pattern: Some(Pattern::And(&[Pattern::Positive("^[.'][ \\t]*Dd +(?:[^\"\\s]+|\"[^\"]+\")"),Pattern::Positive("^[.'][ \\t]*Dt +(?:[^\"\\s]+|\"[^\"]+\") +\"?(?:[1-9]|@[^\\s@]+@)"),Pattern::Positive("^[.'][ \\t]*Sh +(?:[^\"\\s]|\"[^\"]+\")"),]))},Rule { languages: &["Roff Manpage"], pattern: Some(Pattern::And(&[Pattern::Positive("^[.'][ \\t]*TH +(?:[^\"\\s]+|\"[^\"]+\") +\"?(?:[1-9]|@[^\\s@]+@)"),Pattern::Positive("^[.'][ \\t]*SH +(?:[^\"\\s]+|\"[^\"\\s]+)"),]))},Rule { languages: &["Roff"], pattern: None},]),
        (".fs", &[Rule { languages: &["Forth"], pattern: Some(Pattern::Positive("^(: |new-device)"))},Rule { languages: &["F#"], pattern: Some(Pattern::Positive("^\\s*(#light|import|let|module|namespace|open|type)"))},Rule { languages: &["GLSL"], pattern: Some(Pattern::Positive("^\\s*(#version|precision|uniform|varying|vec[234])"))},Rule { languages: &["Filterscript"], pattern: Some(Pattern::Positive("#include|#pragma\\s+(rs|version)|__attribute__"))},]),
        (".1", &[Rule { languages: &["Roff Manpage"], pattern: Some(Pattern::And(&[Pattern::Positive("^[.'][ \\t]*Dd +(?:[^\"\\s]+|\"[^\"]+\")"),Pattern::Positive("^[.'][ \\t]*Dt +(?:[^\"\\s]+|\"[^\"]+\") +\"?(?:[1-9]|@[^\\s@]+@)"),Pattern::Positive("^[.'][ \\t]*Sh +(?:[^\"\\s]|\"[^\"]+\")"),]))},Rule { languages: &["Roff Manpage"], pattern: Some(Pattern::And(&[Pattern::Positive("^[.'][ \\t]*TH +(?:[^\"\\s]+|\"[^\"]+\") +\"?(?:[1-9]|@[^\\s@]+@)"),Pattern::Positive("^[.'][ \\t]*SH +(?:[^\"\\s]+|\"[^\"\\s]+)"),]))},Rule { languages: &["Roff"], pattern: None},]),
        (".s", &[Rule { languages: &["Motorola 68K Assembly"], pattern: Some(Pattern::Or(&[Pattern::Positive("(?im)\\bmoveq(?:\\.l)?\\s+#(?:\\$-?[0-9a-f]{1,3}|%[0-1]{1,8}|-?[0-9]{1,3}),\\s*d[0-7]\\b"),Pattern::Positive("(?im)^\\s*move(?:\\.[bwl])?\\s+(?:sr|usp),\\s*[^\\s]+"),Pattern::Positive("(?im)^\\s*move\\.[bwl]\\s+.*\\b[ad]\\d"),Pattern::Positive("(?im)^\\s*movem\\.[bwl]\\b"),Pattern::Positive("(?im)^\\s*move[mp](?:\\.[wl])?\\b"),Pattern::Positive("(?im)^\\s*btst\\b"),Pattern::Positive("(?im)^\\s*dbra\\b"),]))},]),
        (".man", &[Rule { languages: &["Roff Manpage"], pattern: Some(Pattern::And(&[Pattern::Positive("^[.'][ \\t]*Dd +(?:[^\"\\s]+|\"[^\"]+\")"),Pattern::Positive("^[.'][ \\t]*Dt +(?:[^\"\\s]+|\"[^\"]+\") +\"?(?:[1-9]|@[^\\s@]+@)"),Pattern::Positive("^[.'][ \\t]*Sh +(?:[^\"\\s]|\"[^\"]+\")"),]))},Rule { languages: &["Roff Manpage"], pattern: Some(Pattern::And(&[Pattern::Positive("^[.'][ \\t]*TH +(?:[^\"\\s]+|\"[^\"]+\") +\"?(?:[1-9]|@[^\\s@]+@)"),Pattern::Positive("^[.'][ \\t]*SH +(?:[^\"\\s]+|\"[^\"\\s]+)"),]))},Rule { languages: &["Roff"], pattern: None},]),
        (".f", &[Rule { languages: &["Forth"], pattern: Some(Pattern::Positive("^: "))},Rule { languages: &["Filebench WML"], pattern: Some(Pattern::Positive("flowop"))},Rule { languages: &["Fortran"], pattern: Some(Pattern::Positive("^(?i:[c*][^abd-z]|      (subroutine|program|end|data)\\s|\\s*!)"))},]),
        (".gs", &[Rule { languages: &["GLSL"], pattern: Some(Pattern::Positive("^#version\\s+[0-9]+\\b"))},Rule { languages: &["Gosu"], pattern: Some(Pattern::Positive("^uses java\\."))},]),
        (".6", &[Rule { languages: &["Roff Manpage"], pattern: Some(Pattern::And(&[Pattern::Positive("^[.'][ \\t]*Dd +(?:[^\"\\s]+|\"[^\"]+\")"),Pattern::Positive("^[.'][ \\t]*Dt +(?:[^\"\\s]+|\"[^\"]+\") +\"?(?:[1-9]|@[^\\s@]+@)"),Pattern::Positive("^[.'][ \\t]*Sh +(?:[^\"\\s]|\"[^\"]+\")"),]))},Rule { languages: &["Roff Manpage"], pattern: Some(Pattern::And(&[Pattern::Positive("^[.'][ \\t]*TH +(?:[^\"\\s]+|\"[^\"]+\") +\"?(?:[1-9]|@[^\\s@]+@)"),Pattern::Positive("^[.'][ \\t]*SH +(?:[^\"\\s]+|\"[^\"\\s]+)"),]))},Rule { languages: &["Roff"], pattern: None},]),
        (".dsp", &[Rule { languages: &["Microsoft Developer Studio Project"], pattern: Some(Pattern::Positive("# Microsoft Developer Studio Generated Build File"))},Rule { languages: &["Faust"], pattern: Some(Pattern::Positive("\\bprocess\\s*[(=]|\\b(library|import)\\s*\\(\\s*\"|\\bdeclare\\s+(name|version|author|copyright|license)\\s+\""))},]),
        (".rs", &[Rule { languages: &["Rust"], pattern: Some(Pattern::Positive("^(use |fn |mod |pub |macro_rules|impl|#!?\\[)"))},Rule { languages: &["RenderScript"], pattern: Some(Pattern::Positive("#include|#pragma\\s+(rs|version)|__attribute__"))},]),
        (".1x", &[Rule { languages: &["Roff Manpage"], pattern: Some(Pattern::And(&[Pattern::Positive("^[.'][ \\t]*Dd +(?:[^\"\\s]+|\"[^\"]+\")"),Pattern::Positive("^[.'][ \\t]*Dt +(?:[^\"\\s]+|\"[^\"]+\") +\"?(?:[1-9]|@[^\\s@]+@)"),Pattern::Positive("^[.'][ \\t]*Sh +(?:[^\"\\s]|\"[^\"]+\")"),]))},Rule { languages: &["Roff Manpage"], pattern: Some(Pattern::And(&[Pattern::Positive("^[.'][ \\t]*TH +(?:[^\"\\s]+|\"[^\"]+\") +\"?(?:[1-9]|@[^\\s@]+@)"),Pattern::Positive("^[.'][ \\t]*SH +(?:[^\"\\s]+|\"[^\"\\s]+)"),]))},Rule { languages: &["Roff"], pattern: None},]),
        (".tst", &[Rule { languages: &["GAP"], pattern: Some(Pattern::Positive("gap> "))},Rule { languages: &["Scilab"], pattern: None},]),
        (".asm", &[Rule { languages: &["Motorola 68K Assembly"], pattern: Some(Pattern::Or(&[Pattern::Positive("(?im)\\bmoveq(?:\\.l)?\\s+#(?:\\$-?[0-9a-f]{1,3}|%[0-1]{1,8}|-?[0-9]{1,3}),\\s*d[0-7]\\b"),Pattern::Positive("(?im)^\\s*move(?:\\.[bwl])?\\s+(?:sr|usp),\\s*[^\\s]+"),Pattern::Positive("(?im)^\\s*move\\.[bwl]\\s+.*\\b[ad]\\d"),Pattern::Positive("(?im)^\\s*movem\\.[bwl]\\b"),Pattern::Positive("(?im)^\\s*move[mp](?:\\.[wl])?\\b"),Pattern::Positive("(?im)^\\s*btst\\b"),Pattern::Positive("(?im)^\\s*dbra\\b"),]))},]),
        (".ch", &[Rule { languages: &["xBase"], pattern: Some(Pattern::Positive("^\\s*#\\s*(?i:if|ifdef|ifndef|define|command|xcommand|translate|xtranslate|include|pragma|undef)\\b"))},]),
        (".sql", &[Rule { languages: &["PLpgSQL"], pattern: Some(Pattern::Positive("(?i:^\\\\i\\b|AS \\$\\$|LANGUAGE '?plpgsql'?|SECURITY (DEFINER|INVOKER)|BEGIN( WORK )?;)"))},Rule { languages: &["SQLPL"], pattern: Some(Pattern::Positive("(?i:(alter module)|(language sql)|(begin( NOT)+ atomic)|signal SQLSTATE '[0-9]+')"))},Rule { languages: &["PLSQL"], pattern: Some(Pattern::Positive("(?i:\\$\\$PLSQL_|XMLTYPE|sysdate|systimestamp|\\.nextval|connect by|AUTHID (DEFINER|CURRENT_USER)|constructor\\W+function)"))},Rule { languages: &["TSQL"], pattern: Some(Pattern::And(&[Pattern::Negative("(?i:IDENTIFIED|NUMBER|VARCHAR2|REPEAT|UNTIL|IMMEDIATE)"),Pattern::Positive("(?i:(GO)|(@@)|(CREATE PROCEDURE)|BEGIN( TRY| CATCH)|OUTPUT( INSERTED)|IF|ELSE|IIF|CHOOSE|CURSOR|FETCH|DEALLOCATE|DECLARE)"),]))},Rule { languages: &["SQL"], pattern: Some(Pattern::Negative("(?i:begin|boolean|package|exception)"))},]),
        (".v", &[Rule { languages: &["Coq"], pattern: Some(Pattern::Positive("\\(\\*.*?\\*\\)|(?:^|\\s)(?:Proof|Qed)\\.(?:$|\\s)|(?:^|\\s)Require[ \\t]+Import\\s"))},Rule { languages: &["Verilog"], pattern: Some(Pattern::Positive("^[ \\t]*module\\s+[^\\s()]+\\s+\\#?\\(|^[ \\t]*`(?:ifdef|timescale)\\s|^[ \\t]*always[ \\t]+@"))},Rule { languages: &["V"], pattern: Some(Pattern::Positive("\\$(?:if|else)[ \\t]|^[ \\t]*fn\\s+[^\\s()]+\\(.*?\\).*?\\{|^[ \\t]*for\\s*\\{"))},]),
        (".3x", &[Rule { languages: &["Roff Manpage"], pattern: Some(Pattern::And(&[Pattern::Positive("^[.'][ \\t]*Dd +(?:[^\"\\s]+|\"[^\"]+\")"),Pattern::Positive("^[.'][ \\t]*Dt +(?:[^\"\\s]+|\"[^\"]+\") +\"?(?:[1-9]|@[^\\s@]+@)"),Pattern::Positive("^[.'][ \\t]*Sh +(?:[^\"\\s]|\"[^\"]+\")"),]))},Rule { languages: &["Roff Manpage"], pattern: Some(Pattern::And(&[Pattern::Positive("^[.'][ \\t]*TH +(?:[^\"\\s]+|\"[^\"]+\") +\"?(?:[1-9]|@[^\\s@]+@)"),Pattern::Positive("^[.'][ \\t]*SH +(?:[^\"\\s]+|\"[^\"\\s]+)"),]))},Rule { languages: &["Roff"], pattern: None},]),
        (".1in", &[Rule { languages: &["Roff Manpage"], pattern: Some(Pattern::And(&[Pattern::Positive("^[.'][ \\t]*Dd +(?:[^\"\\s]+|\"[^\"]+\")"),Pattern::Positive("^[.'][ \\t]*Dt +(?:[^\"\\s]+|\"[^\"]+\") +\"?(?:[1-9]|@[^\\s@]+@)"),Pattern::Positive("^[.'][ \\t]*Sh +(?:[^\"\\s]|\"[^\"]+\")"),]))},Rule { languages: &["Roff Manpage"], pattern: Some(Pattern::And(&[Pattern::Positive("^[.'][ \\t]*TH +(?:[^\"\\s]+|\"[^\"]+\") +\"?(?:[1-9]|@[^\\s@]+@)"),Pattern::Positive("^[.'][ \\t]*SH +(?:[^\"\\s]+|\"[^\"\\s]+)"),]))},Rule { languages: &["Roff"], pattern: None},]),
        (".ms", &[Rule { languages: &["Roff"], pattern: Some(Pattern::Positive("^[.'][A-Za-z]{2}(\\s|$)"))},Rule { languages: &["Unix Assembly"], pattern: Some(Pattern::And(&[Pattern::Negative("/\\*"),Pattern::Positive("^\\s*\\.(?:include\\s|globa?l\\s|[A-Za-z][_A-Za-z0-9]*:)"),]))},Rule { languages: &["MAXScript"], pattern: None},]),
        (".3p", &[Rule { languages: &["Roff Manpage"], pattern: Some(Pattern::And(&[Pattern::Positive("^[.'][ \\t]*Dd +(?:[^\"\\s]+|\"[^\"]+\")"),Pattern::Positive("^[.'][ \\t]*Dt +(?:[^\"\\s]+|\"[^\"]+\") +\"?(?:[1-9]|@[^\\s@]+@)"),Pattern::Positive("^[.'][ \\t]*Sh +(?:[^\"\\s]|\"[^\"]+\")"),]))},Rule { languages: &["Roff Manpage"], pattern: Some(Pattern::And(&[Pattern::Positive("^[.'][ \\t]*TH +(?:[^\"\\s]+|\"[^\"]+\") +\"?(?:[1-9]|@[^\\s@]+@)"),Pattern::Positive("^[.'][ \\t]*SH +(?:[^\"\\s]+|\"[^\"\\s]+)"),]))},Rule { languages: &["Roff"], pattern: None},]),
        (".pl", &[Rule { languages: &["Prolog"], pattern: Some(Pattern::Positive("^[^#]*:-"))},Rule { languages: &["Perl"], pattern: Some(Pattern::Positive("\\buse\\s+(?:strict\\b|v?5\\.)"))},Rule { languages: &["Raku"], pattern: Some(Pattern::Positive("^\\s*(?:use\\s+v6\\b|\\bmodule\\b|\\b(?:my\\s+)?class\\b)"))},]),
        (".m", &[Rule { languages: &["Objective-C"], pattern: Some(Pattern::Positive("^\\s*(@(interface|class|protocol|property|end|synchronised|selector|implementation)\\b|#import\\s+.+\\.h[\">])"))},Rule { languages: &["Mercury"], pattern: Some(Pattern::Positive(":- module"))},Rule { languages: &["MUF"], pattern: Some(Pattern::Positive("^: "))},Rule { languages: &["M"], pattern: Some(Pattern::Positive("^\\s*;"))},Rule { languages: &["Mathematica"], pattern: Some(Pattern::And(&[Pattern::Positive("\\(\\*"),Pattern::Positive("\\*\\)$"),]))},Rule { languages: &["MATLAB"], pattern: Some(Pattern::Positive("^\\s*%"))},Rule { languages: &["Limbo"], pattern: Some(Pattern::Positive("^\\w+\\s*:\\s*module\\s*\\{"))},]),
        (".mod", &[Rule { languages: &["XML"], pattern: Some(Pattern::Positive("<!ENTITY "))},Rule { languages: &["Modula-2"], pattern: Some(Pattern::Positive("^\\s*(?i:MODULE|END) [\\w\\.]+;"))},Rule { languages: &["Linux Kernel Module","AMPL"], pattern: None},]),
        (".ncl", &[Rule { languages: &["XML"], pattern: Some(Pattern::Positive("^\\s*<\\?xml\\s+version"))},Rule { languages: &["Text"], pattern: Some(Pattern::Positive("THE_TITLE"))},]),
        (".vba", &[Rule { languages: &["Vim script"], pattern: Some(Pattern::Positive("^UseVimball"))},Rule { languages: &["VBA"], pattern: None},]),
        (".3in", &[Rule { languages: &["Roff Manpage"], pattern: Some(Pattern::And(&[Pattern::Positive("^[.'][ \\t]*Dd +(?:[^\"\\s]+|\"[^\"]+\")"),Pattern::Positive("^[.'][ \\t]*Dt +(?:[^\"\\s]+|\"[^\"]+\") +\"?(?:[1-9]|@[^\\s@]+@)"),Pattern::Positive("^[.'][ \\t]*Sh +(?:[^\"\\s]|\"[^\"]+\")"),]))},Rule { languages: &["Roff Manpage"], pattern: Some(Pattern::And(&[Pattern::Positive("^[.'][ \\t]*TH +(?:[^\"\\s]+|\"[^\"]+\") +\"?(?:[1-9]|@[^\\s@]+@)"),Pattern::Positive("^[.'][ \\t]*SH +(?:[^\"\\s]+|\"[^\"\\s]+)"),]))},Rule { languages: &["Roff"], pattern: None},]),
        (".fr", &[Rule { languages: &["Forth"], pattern: Some(Pattern::Positive("^(: |also |new-device|previous )"))},Rule { languages: &["Frege"], pattern: Some(Pattern::Positive("^\\s*(import|module|package|data|type) "))},Rule { languages: &["Text"], pattern: None},]),
        (".1m", &[Rule { languages: &["Roff Manpage"], pattern: Some(Pattern::And(&[Pattern::Positive("^[.'][ \\t]*Dd +(?:[^\"\\s]+|\"[^\"]+\")"),Pattern::Positive("^[.'][ \\t]*Dt +(?:[^\"\\s]+|\"[^\"]+\") +\"?(?:[1-9]|@[^\\s@]+@)"),Pattern::Positive("^[.'][ \\t]*Sh +(?:[^\"\\s]|\"[^\"]+\")"),]))},Rule { languages: &["Roff Manpage"], pattern: Some(Pattern::And(&[Pattern::Positive("^[.'][ \\t]*TH +(?:[^\"\\s]+|\"[^\"]+\") +\"?(?:[1-9]|@[^\\s@]+@)"),Pattern::Positive("^[.'][ \\t]*SH +(?:[^\"\\s]+|\"[^\"\\s]+)"),]))},Rule { languages: &["Roff"], pattern: None},]),
        (".pro", &[Rule { languages: &["Proguard"], pattern: Some(Pattern::Positive("^-(include\\b.*\\.pro$|keep\\b|keepclassmembers\\b|keepattributes\\b)"))},Rule { languages: &["Prolog"], pattern: Some(Pattern::Positive("^[^\\[#]+:-"))},Rule { languages: &["INI"], pattern: Some(Pattern::Positive("last_client="))},Rule { languages: &["QMake"], pattern: Some(Pattern::And(&[Pattern::Positive("HEADERS"),Pattern::Positive("SOURCES"),]))},Rule { languages: &["IDL"], pattern: Some(Pattern::Positive("^\\s*function[ \\w,]+$"))},]),
        (".4", &[Rule { languages: &["Roff Manpage"], pattern: Some(Pattern::And(&[Pattern::Positive("^[.'][ \\t]*Dd +(?:[^\"\\s]+|\"[^\"]+\")"),Pattern::Positive("^[.'][ \\t]*Dt +(?:[^\"\\s]+|\"[^\"]+\") +\"?(?:[1-9]|@[^\\s@]+@)"),Pattern::Positive("^[.'][ \\t]*Sh +(?:[^\"\\s]|\"[^\"]+\")"),]))},Rule { languages: &["Roff Manpage"], pattern: Some(Pattern::And(&[Pattern::Positive("^[.'][ \\t]*TH +(?:[^\"\\s]+|\"[^\"]+\") +\"?(?:[1-9]|@[^\\s@]+@)"),Pattern::Positive("^[.'][ \\t]*SH +(?:[^\"\\s]+|\"[^\"\\s]+)"),]))},Rule { languages: &["Roff"], pattern: None},]),
        (".inc", &[Rule { languages: &["Motorola 68K Assembly"], pattern: Some(Pattern::Or(&[Pattern::Positive("(?im)\\bmoveq(?:\\.l)?\\s+#(?:\\$-?[0-9a-f]{1,3}|%[0-1]{1,8}|-?[0-9]{1,3}),\\s*d[0-7]\\b"),Pattern::Positive("(?im)^\\s*move(?:\\.[bwl])?\\s+(?:sr|usp),\\s*[^\\s]+"),Pattern::Positive("(?im)^\\s*move\\.[bwl]\\s+.*\\b[ad]\\d"),Pattern::Positive("(?im)^\\s*movem\\.[bwl]\\b"),Pattern::Positive("(?im)^\\s*move[mp](?:\\.[wl])?\\b"),Pattern::Positive("(?im)^\\s*btst\\b"),Pattern::Positive("(?im)^\\s*dbra\\b"),]))},Rule { languages: &["PHP"], pattern: Some(Pattern::Positive("^<\\?(?:php)?"))},Rule { languages: &["SourcePawn"], pattern: Some(Pattern::Positive("^public\\s+(?:SharedPlugin(?:\\s+|:)__pl_\\w+\\s*=(?:\\s*\\{)?|(?:void\\s+)?__pl_\\w+_SetNTVOptional\\(\\)(?:\\s*\\{)?)"))},Rule { languages: &["NASL"], pattern: Some(Pattern::Or(&[Pattern::Positive("^\\s*include\\s*\\(\\s*(?:\"|')[\\\\\\w/\\-\\.:\\s]+\\.(?:nasl|inc)\\s*(?:\"|')\\s*\\)\\s*;"),Pattern::Positive("^\\s*(?:global|local)_var\\s+(?:\\w+(?:\\s*=\\s*[\\w\\-\"']+)?\\s*)(?:,\\s*\\w+(?:\\s*=\\s*[\\w\\-\"']+)?\\s*)*+\\s*;"),Pattern::Positive("^\\s*namespace\\s+\\w+\\s*\\{"),Pattern::Positive("^\\s*object\\s+\\w+\\s*(?:extends\\s+\\w+(?:::\\w+)?)?\\s*\\{"),Pattern::Positive("^\\s*(?:public\\s+|private\\s+|\\s*)function\\s+\\w+\\s*\\([\\w\\s,]*\\)\\s*\\{"),]))},Rule { languages: &["POV-Ray SDL"], pattern: Some(Pattern::Positive("^\\s*#(declare|local|macro|while)\\s"))},]),
        (".es", &[Rule { languages: &["Erlang"], pattern: Some(Pattern::Positive("^\\s*(?:%%|main\\s*\\(.*?\\)\\s*->)"))},Rule { languages: &["JavaScript"], pattern: Some(Pattern::Positive("(?m://|(\"|')use strict(\"|')|export\\s+default\\s|/\\*.*?\\*/)"))},]),
        (".plist", &[Rule { languages: &["XML Property List"], pattern: Some(Pattern::Positive("<!DOCTYPE\\s+plist"))},Rule { languages: &["OpenStep Property List"], pattern: None},]),
        (".cl", &[Rule { languages: &["Common Lisp"], pattern: Some(Pattern::Positive("^\\s*\\((?i:defun|in-package|defpackage) "))},Rule { languages: &["Cool"], pattern: Some(Pattern::Positive("^class"))},Rule { languages: &["OpenCL"], pattern: Some(Pattern::Positive("/\\* |// |^\\}"))},]),
        (".cls", &[Rule { languages: &["TeX"], pattern: Some(Pattern::Positive("\\\\\\w+\\{"))},Rule { languages: &["ObjectScript"], pattern: Some(Pattern::Positive("^Class\\s"))},]),
        (".hh", &[Rule { languages: &["Hack"], pattern: Some(Pattern::Positive("<\\?hh"))},]),
        (".sc", &[Rule { languages: &["SuperCollider"], pattern: Some(Pattern::Positive("(?i:\\^(this|super)\\.|^\\s*~\\w+\\s*=\\.)"))},Rule { languages: &["Scala"], pattern: Some(Pattern::Positive("(^\\s*import (scala|java)\\.|^\\s*class\\b)"))},]),
        (".asc", &[Rule { languages: &["Public Key"], pattern: Some(Pattern::Positive("^(----[- ]BEGIN|ssh-(rsa|dss)) "))},Rule { languages: &["AsciiDoc"], pattern: Some(Pattern::Positive("^[=-]+(\\s|\\n)|\\{\\{[A-Za-z]"))},Rule { languages: &["AGS Script"], pattern: Some(Pattern::Positive("^(//.+|((import|export)\\s+)?(function|int|float|char)\\s+((room|repeatedly|on|game)_)?([A-Za-z]+[A-Za-z_0-9]+)\\s*[;\\(])"))},]),
        (".8", &[Rule { languages: &["Roff Manpage"], pattern: Some(Pattern::And(&[Pattern::Positive("^[.'][ \\t]*Dd +(?:[^\"\\s]+|\"[^\"]+\")"),Pattern::Positive("^[.'][ \\t]*Dt +(?:[^\"\\s]+|\"[^\"]+\") +\"?(?:[1-9]|@[^\\s@]+@)"),Pattern::Positive("^[.'][ \\t]*Sh +(?:[^\"\\s]|\"[^\"]+\")"),]))},Rule { languages: &["Roff Manpage"], pattern: Some(Pattern::And(&[Pattern::Positive("^[.'][ \\t]*TH +(?:[^\"\\s]+|\"[^\"]+\") +\"?(?:[1-9]|@[^\\s@]+@)"),Pattern::Positive("^[.'][ \\t]*SH +(?:[^\"\\s]+|\"[^\"\\s]+)"),]))},Rule { languages: &["Roff"], pattern: None},]),
        (".pod", &[Rule { languages: &["Pod 6"], pattern: Some(Pattern::Positive("^[\\s&&[^\\n]]*=(comment|begin pod|begin para|item\\d+)"))},Rule { languages: &["Pod"], pattern: None},]),
        (".3qt", &[Rule { languages: &["Roff Manpage"], pattern: Some(Pattern::And(&[Pattern::Positive("^[.'][ \\t]*Dd +(?:[^\"\\s]+|\"[^\"]+\")"),Pattern::Positive("^[.'][ \\t]*Dt +(?:[^\"\\s]+|\"[^\"]+\") +\"?(?:[1-9]|@[^\\s@]+@)"),Pattern::Positive("^[.'][ \\t]*Sh +(?:[^\"\\s]|\"[^\"]+\")"),]))},Rule { languages: &["Roff Manpage"], pattern: Some(Pattern::And(&[Pattern::Positive("^[.'][ \\t]*TH +(?:[^\"\\s]+|\"[^\"]+\") +\"?(?:[1-9]|@[^\\s@]+@)"),Pattern::Positive("^[.'][ \\t]*SH +(?:[^\"\\s]+|\"[^\"\\s]+)"),]))},Rule { languages: &["Roff"], pattern: None},]),
        (".tsx", &[Rule { languages: &["TSX"], pattern: Some(Pattern::Positive("^\\s*(import.+(from\\s+|require\\()['\"]react|///\\s*<reference\\s)"))},Rule { languages: &["XML"], pattern: Some(Pattern::Positive("(?i:^\\s*<\\?xml\\s+version)"))},]),
        (".l", &[Rule { languages: &["Common Lisp"], pattern: Some(Pattern::Positive("\\(def(un|macro)\\s"))},Rule { languages: &["Lex"], pattern: Some(Pattern::Positive("^(%[%{}]xs|<.*>)"))},Rule { languages: &["Roff"], pattern: Some(Pattern::Positive("^\\.[A-Za-z]{2}(\\s|$)"))},Rule { languages: &["PicoLisp"], pattern: Some(Pattern::Positive("^\\((de|class|rel|code|data|must)\\s"))},]),
        (".2", &[Rule { languages: &["Roff Manpage"], pattern: Some(Pattern::And(&[Pattern::Positive("^[.'][ \\t]*Dd +(?:[^\"\\s]+|\"[^\"]+\")"),Pattern::Positive("^[.'][ \\t]*Dt +(?:[^\"\\s]+|\"[^\"]+\") +\"?(?:[1-9]|@[^\\s@]+@)"),Pattern::Positive("^[.'][ \\t]*Sh +(?:[^\"\\s]|\"[^\"]+\")"),]))},Rule { languages: &["Roff Manpage"], pattern: Some(Pattern::And(&[Pattern::Positive("^[.'][ \\t]*TH +(?:[^\"\\s]+|\"[^\"]+\") +\"?(?:[1-9]|@[^\\s@]+@)"),Pattern::Positive("^[.'][ \\t]*SH +(?:[^\"\\s]+|\"[^\"\\s]+)"),]))},Rule { languages: &["Roff"], pattern: None},]),
        (".builds", &[Rule { languages: &["XML"], pattern: Some(Pattern::Positive("^(\\s*)(?i:<Project|<Import|<Property|<?xml|xmlns)"))},Rule { languages: &["Text"], pattern: None},]),
        (".gml", &[Rule { languages: &["XML"], pattern: Some(Pattern::Positive("(?i:^\\s*(<\\?xml|xmlns))"))},Rule { languages: &["Graph Modeling Language"], pattern: Some(Pattern::Positive("(?i:^\\s*(graph|node)\\s+\\[$)"))},Rule { languages: &["Gerber Image"], pattern: Some(Pattern::Positive("\\*%$"))},Rule { languages: &["Game Maker Language"], pattern: None},]),
        (".props", &[Rule { languages: &["XML"], pattern: Some(Pattern::Positive("^(\\s*)(?i:<Project|<Import|<Property|<\\?xml|xmlns)"))},Rule { languages: &["INI"], pattern: Some(Pattern::Positive("(?i:\\w+\\s*=\\s*)"))},]),
        (".toc", &[Rule { languages: &["World of Warcraft Addon Data"], pattern: Some(Pattern::Positive("^## |@no-lib-strip@"))},Rule { languages: &["TeX"], pattern: Some(Pattern::Positive("^\\\\(contentsline|defcounter|beamer|boolfalse)"))},]),
        (".php", &[Rule { languages: &["Hack"], pattern: Some(Pattern::Positive("<\\?hh"))},Rule { languages: &["PHP"], pattern: Some(Pattern::Positive("<\\?[^h]"))},]),
        (".mask", &[Rule { languages: &["Unity3d Asset"], pattern: Some(Pattern::Positive("tag:unity3d.com"))},]),
        (".ts", &[Rule { languages: &["XML"], pattern: Some(Pattern::Positive("<TS\\b"))},Rule { languages: &["TypeScript"], pattern: None},]),
        (".ls", &[Rule { languages: &["LoomScript"], pattern: Some(Pattern::Positive("^\\s*package\\s*[\\w\\./\\*\\s]*\\s*\\{"))},Rule { languages: &["LiveScript"], pattern: None},]),
        (".yy", &[Rule { languages: &["JSON"], pattern: Some(Pattern::Positive("\"modelName\":\\s*\"GM"))},Rule { languages: &["Yacc"], pattern: None},]),
        (".gd", &[Rule { languages: &["GAP"], pattern: Some(Pattern::Positive("\\s*(Declare|BindGlobal|KeyDependentOperation)"))},Rule { languages: &["GDScript"], pattern: Some(Pattern::Positive("\\s*(extends|var|const|enum|func|class|signal|tool|yield|assert|onready)"))},]),
        (".ecl", &[Rule { languages: &["ECLiPSe"], pattern: Some(Pattern::Positive("^[^#]+:-"))},Rule { languages: &["ECL"], pattern: Some(Pattern::Positive(":="))},]),
        (".i", &[Rule { languages: &["Motorola 68K Assembly"], pattern: Some(Pattern::Or(&[Pattern::Positive("(?im)\\bmoveq(?:\\.l)?\\s+#(?:\\$-?[0-9a-f]{1,3}|%[0-1]{1,8}|-?[0-9]{1,3}),\\s*d[0-7]\\b"),Pattern::Positive("(?im)^\\s*move(?:\\.[bwl])?\\s+(?:sr|usp),\\s*[^\\s]+"),Pattern::Positive("(?im)^\\s*move\\.[bwl]\\s+.*\\b[ad]\\d"),Pattern::Positive("(?im)^\\s*movem\\.[bwl]\\b"),Pattern::Positive("(?im)^\\s*move[mp](?:\\.[wl])?\\b"),Pattern::Positive("(?im)^\\s*btst\\b"),Pattern::Positive("(?im)^\\s*dbra\\b"),]))},Rule { languages: &["SWIG"], pattern: Some(Pattern::Positive("^[ \\t]*%[a-z_]+\\b|^%[{}]$"))},]),
        (".lisp", &[Rule { languages: &["Common Lisp"], pattern: Some(Pattern::Positive("^\\s*\\((?i:defun|in-package|defpackage) "))},Rule { languages: &["NewLisp"], pattern: Some(Pattern::Positive("^\\s*\\(define "))},]),
        (".q", &[Rule { languages: &["q"], pattern: Some(Pattern::Positive("((?i:[A-Z.][\\w.]*:\\{)|(^|\\n)\\\\(cd?|d|l|p|ts?) )"))},Rule { languages: &["HiveQL"], pattern: Some(Pattern::Positive("(?i:SELECT\\s+[\\w*,]+\\s+FROM|(CREATE|ALTER|DROP)\\s(DATABASE|SCHEMA|TABLE))"))},]),
        (".odin", &[Rule { languages: &["Object Data Instance Notation"], pattern: Some(Pattern::Positive("(?:^|<)\\s*[A-Za-z0-9_]+\\s*=\\s*<"))},Rule { languages: &["Odin"], pattern: Some(Pattern::Positive("package\\s+\\w+|\\b(?:im|ex)port\\s*\"[\\w:./]+\"|\\w+\\s*::\\s*(?:proc|struct)\\s*\\(|^\\s*//\\s"))},]),
        (".for", &[Rule { languages: &["Forth"], pattern: Some(Pattern::Positive("^: "))},Rule { languages: &["Fortran"], pattern: Some(Pattern::Positive("^(?i:[c*][^abd-z]|      (subroutine|program|end|data)\\s|\\s*!)"))},]),
        (".x", &[Rule { languages: &["DirectX 3D File"], pattern: Some(Pattern::Positive("^xof 030(2|3)(?:txt|bin|tzip|bzip)\\b"))},Rule { languages: &["RPC"], pattern: Some(Pattern::Positive("\\b(program|version)\\s+\\w+\\s*\\{|\\bunion\\s+\\w+\\s+switch\\s*\\("))},Rule { languages: &["Logos"], pattern: Some(Pattern::Positive("^%(end|ctor|hook|group)\\b"))},Rule { languages: &["Linker Script"], pattern: Some(Pattern::Positive("OUTPUT_ARCH\\(|OUTPUT_FORMAT\\(|SECTIONS"))},]),
        (".3pm", &[Rule { languages: &["Roff Manpage"], pattern: Some(Pattern::And(&[Pattern::Positive("^[.'][ \\t]*Dd +(?:[^\"\\s]+|\"[^\"]+\")"),Pattern::Positive("^[.'][ \\t]*Dt +(?:[^\"\\s]+|\"[^\"]+\") +\"?(?:[1-9]|@[^\\s@]+@)"),Pattern::Positive("^[.'][ \\t]*Sh +(?:[^\"\\s]|\"[^\"]+\")"),]))},Rule { languages: &["Roff Manpage"], pattern: Some(Pattern::And(&[Pattern::Positive("^[.'][ \\t]*TH +(?:[^\"\\s]+|\"[^\"]+\") +\"?(?:[1-9]|@[^\\s@]+@)"),Pattern::Positive("^[.'][ \\t]*SH +(?:[^\"\\s]+|\"[^\"\\s]+)"),]))},Rule { languages: &["Roff"], pattern: None},]),
        (".asy", &[Rule { languages: &["LTspice Symbol"], pattern: Some(Pattern::Positive("^SymbolType[ \\t]"))},Rule { languages: &["Asymptote"], pattern: None},]),
        (".3m", &[Rule { languages: &["Roff Manpage"], pattern: Some(Pattern::And(&[Pattern::Positive("^[.'][ \\t]*Dd +(?:[^\"\\s]+|\"[^\"]+\")"),Pattern::Positive("^[.'][ \\t]*Dt +(?:[^\"\\s]+|\"[^\"]+\") +\"?(?:[1-9]|@[^\\s@]+@)"),Pattern::Positive("^[.'][ \\t]*Sh +(?:[^\"\\s]|\"[^\"]+\")"),]))},Rule { languages: &["Roff Manpage"], pattern: Some(Pattern::And(&[Pattern::Positive("^[.'][ \\t]*TH +(?:[^\"\\s]+|\"[^\"]+\") +\"?(?:[1-9]|@[^\\s@]+@)"),Pattern::Positive("^[.'][ \\t]*SH +(?:[^\"\\s]+|\"[^\"\\s]+)"),]))},Rule { languages: &["Roff"], pattern: None},]),
        (".p", &[Rule { languages: &["Gnuplot"], pattern: Some(Pattern::Or(&[Pattern::Positive("^s?plot\\b"),Pattern::Positive("^set\\s+(term|terminal|out|output|[xy]tics|[xy]label|[xy]range|style)\\b"),]))},Rule { languages: &["OpenEdge ABL"], pattern: None},]),
    ],
};

